const Utils=$.fn.bootstrapTable.utils;function printPageBuilderDefault(t){return`\n  <html>\n  <head>\n  <style type="text/css" media="print">\n  @page {\n    size: auto;\n    margin: 25px 0 25px 0;\n  }\n  </style>\n  <style type="text/css" media="all">\n  table {\n    border-collapse: collapse;\n    font-size: 12px;\n  }\n  table, th, td {\n    border: 1px solid grey;\n  }\n  th, td {\n    text-align: center;\n    vertical-align: middle;\n  }\n  p {\n    font-weight: bold;\n    margin-left:20px;\n  }\n  table {\n    width:94%;\n    margin-left:3%;\n    margin-right:3%;\n  }\n  div.bs-table-print {\n    text-align:center;\n  }\n  </style>\n  </head>\n  <title>Print Table</title>\n  <body>\n  <p>Printed on: ${new Date} </p>\n  <div class="bs-table-print">${t}</div>\n  </body>\n  </html>`}$.extend($.fn.bootstrapTable.locales,{formatPrint:()=>"Print"}),$.extend($.fn.bootstrapTable.defaults,$.fn.bootstrapTable.locales),$.extend($.fn.bootstrapTable.defaults,{showPrint:!1,printAsFilteredAndSortedOnUI:!0,printSortColumn:void 0,printSortOrder:"asc",printPageBuilder:t=>printPageBuilderDefault(t)}),$.extend($.fn.bootstrapTable.COLUMN_DEFAULTS,{printFilter:void 0,printIgnore:!1,printFormatter:void 0}),$.extend($.fn.bootstrapTable.defaults.icons,{print:{bootstrap3:"glyphicon-print icon-share","bootstrap-table":"icon-printer"}[$.fn.bootstrapTable.theme]||"fa-print"}),$.BootstrapTable=class extends $.BootstrapTable{init(...t){super.init(...t),this.options.showPrint&&(this.mergedCells=[])}initToolbar(...t){this.showToolbar=this.showToolbar||this.options.showPrint,this.options.showPrint&&(this.buttons=Object.assign(this.buttons,{print:{text:this.options.formatPrint(),icon:this.options.icons.print,event:()=>{this.doPrint(this.options.printAsFilteredAndSortedOnUI?this.getData():this.options.data.slice(0))},attributes:{"aria-label":this.options.formatPrint(),title:this.options.formatPrint()}}})),super.initToolbar(...t)}mergeCells(t){if(super.mergeCells(t),!this.options.showPrint)return;let n=this.getVisibleFields().indexOf(t.field);Utils.hasDetailViewIcon(this.options)&&(n+=1),this.mergedCells.push({row:t.index,col:n,rowspan:t.rowspan||1,colspan:t.colspan||1})}doPrint(t){const n=(t,n,e)=>{const o=Utils.calculateObjectValue(e,e.printFormatter,[t[e.field],t,n],t[e.field]);return null==o?this.options.undefinedText:o};var e;const o=((t,e)=>{const o=[`<table dir="${this.$el.attr("dir")||"ltr"}"><thead>`];for(const t of e){o.push("<tr>");for(let n=0;n<t.length;n++)t[n].printIgnore||o.push(`<th\n              ${Utils.sprintf(' rowspan="%s"',t[n].rowspan)}\n              ${Utils.sprintf(' colspan="%s"',t[n].colspan)}\n              >${t[n].title}</th>`);o.push("</tr>")}o.push("</thead><tbody>");const s=[];if(this.mergedCells)for(let t=0;t<this.mergedCells.length;t++){const n=this.mergedCells[t];for(let t=0;t<n.rowspan;t++){const e=n.row+t;for(let t=0;t<n.colspan;t++){const o=n.col+t;s.push(`${e},${o}`)}}}for(let i=0;i<t.length;i++){o.push("<tr>");const r=e.flat(1);r.sort(((t,n)=>t.colspanIndex-n.colspanIndex));for(let e=0;e<r.length;e++){if(r[e].colspanGroup>0)continue;let l=0,a=0;if(this.mergedCells)for(let t=0;t<this.mergedCells.length;t++){const n=this.mergedCells[t];n.col===e&&n.row===i&&(l=n.rowspan,a=n.colspan)}!r[e].printIgnore&&r[e].field&&(!s.includes(`${i},${e}`)||l>0&&a>0)&&(l>0&&a>0?o.push(`<td ${Utils.sprintf(' rowspan="%s"',l)} ${Utils.sprintf(' colspan="%s"',a)}>`,n(t[i],i,r[e]),"</td>"):o.push("<td>",n(t[i],i,r[e]),"</td>"))}o.push("</tr>")}if(o.push("</tbody>"),this.options.showFooter){o.push("<footer><tr>");for(const n of e)for(let e=0;e<n.length;e++)if(!n[e].printIgnore){const s=Utils.trToData(n,this.$el.find(">tfoot>tr")),i=Utils.calculateObjectValue(n[e],n[e].footerFormatter,[t],s[0]&&s[0][n[e].field]||"");o.push(`<th>${i}</th>`)}o.push("</tr></footer>")}return o.push("</table>"),o.join("")})(t=((t,n,e)=>{if(!n)return t;let o="asc"!==e;return o=-(+o||-1),t.sort(((t,e)=>o*t[n].localeCompare(e[n])))})(t=((t,n)=>t.filter((t=>((t,n)=>{for(let e=0;e<n.length;++e)if(t[n[e].colName]!==n[e].value)return!1;return!0})(t,n))))(t,(e=this.options.columns)&&e[0]?e[0].filter((t=>t.printFilter)).map((t=>({colName:t.field,value:t.printFilter}))):[]),this.options.printSortColumn,this.options.printSortOrder),this.options.columns),s=window.open("");s.document.write(this.options.printPageBuilder.call(this,o)),s.document.close(),s.focus(),s.print(),s.close()}};