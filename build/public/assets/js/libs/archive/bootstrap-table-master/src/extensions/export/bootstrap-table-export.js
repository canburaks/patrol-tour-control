const Utils=$.fn.bootstrapTable.utils,TYPE_NAME={json:"JSON",xml:"XML",png:"PNG",csv:"CSV",txt:"TXT",sql:"SQL",doc:"MS-Word",excel:"MS-Excel",xlsx:"MS-Excel (OpenXML)",powerpoint:"MS-Powerpoint",pdf:"PDF"};$.extend($.fn.bootstrapTable.defaults,{showExport:!1,exportDataType:"basic",exportTypes:["json","xml","csv","txt","sql","excel"],exportOptions:{onCellHtmlData:(t,o,e,s)=>t.is("th")?t.find(".th-inner").text():s},exportFooter:!1}),$.extend($.fn.bootstrapTable.columnDefaults,{forceExport:!1,forceHide:!1}),$.extend($.fn.bootstrapTable.defaults.icons,{export:{bootstrap3:"glyphicon-export icon-share",materialize:"file_download","bootstrap-table":"icon-download"}[$.fn.bootstrapTable.theme]||"fa-download"}),$.extend($.fn.bootstrapTable.locales,{formatExport:()=>"Export data"}),$.extend($.fn.bootstrapTable.defaults,$.fn.bootstrapTable.locales),$.fn.bootstrapTable.methods.push("exportTable"),$.extend($.fn.bootstrapTable.defaults,{onExportSaved:t=>!1}),$.extend($.fn.bootstrapTable.Constructor.EVENTS,{"export-saved.bs.table":"onExportSaved"}),$.BootstrapTable=class extends $.BootstrapTable{initToolbar(...t){const o=this.options;let e=o.exportTypes;if(this.showToolbar=this.showToolbar||o.showExport,this.options.showExport){if("string"==typeof e){const t=e.slice(1,-1).replace(/ /g,"").split(",");e=t.map((t=>t.slice(1,-1)))}if(this.$export=this.$toolbar.find(">.columns div.export"),this.$export.length)return void this.updateExportButton();this.buttons=Object.assign(this.buttons,{export:{html:1===e.length?`\n            <div class="export ${this.constants.classes.buttonsDropdown}"\n            data-type="${e[0]}">\n            <button class="${this.constants.buttonsClass}"\n            aria-label="Export"\n            type="button"\n            title="${o.formatExport()}">\n            ${o.showButtonIcons?Utils.sprintf(this.constants.html.icon,o.iconsPrefix,o.icons.export):""}\n            ${o.showButtonText?o.formatExport():""}\n            </button>\n            </div>\n          `:`\n            <div class="export ${this.constants.classes.buttonsDropdown}">\n            <button class="${this.constants.buttonsClass} dropdown-toggle"\n            aria-label="Export"\n            ${this.constants.dataToggle}="dropdown"\n            type="button"\n            title="${o.formatExport()}">\n            ${o.showButtonIcons?Utils.sprintf(this.constants.html.icon,o.iconsPrefix,o.icons.export):""}\n            ${o.showButtonText?o.formatExport():""}\n            ${this.constants.html.dropdownCaret}\n            </button>\n            </div>\n          `}})}if(super.initToolbar(...t),this.$export=this.$toolbar.find(">.columns div.export"),!this.options.showExport)return;let s=$(this.constants.html.toolbarDropdown.join("")),n=this.$export;if(e.length>1){this.$export.append(s),s.children().length&&(s=s.children().eq(0));for(const t of e)if(TYPE_NAME.hasOwnProperty(t)){const o=$(Utils.sprintf(this.constants.html.pageDropdownItem,"",TYPE_NAME[t]));o.attr("data-type",t),s.append(o)}n=s.children()}this.updateExportButton(),n.click((t=>{t.preventDefault();const o={type:$(t.currentTarget).data("type"),escape:!1};this.exportTable(o)})),this.handleToolbar()}handleToolbar(){this.$export&&super.handleToolbar&&super.handleToolbar()}exportTable(t){const o=this.options,e=this.header.stateField,s=o.cardView,n=n=>{e&&this.hideColumn(e),s&&this.toggleView(),this.columns.forEach((t=>{t.forceHide&&this.hideColumn(t.field)}));const i=this.getData();if(o.detailView&&o.detailViewIcon){const t="left"===o.detailViewAlign?0:this.getVisibleFields().length+Utils.getDetailViewIndexOffset(this.options);o.exportOptions.ignoreColumn=[t].concat(o.exportOptions.ignoreColumn||[])}if(o.exportFooter){const t=this.$tableFooter.find("tr").first(),o={},e=[];$.each(t.children(),((t,s)=>{const n=$(s).children(".th-inner").first().html();o[this.columns[t].field]="&nbsp;"===n?null:n,e.push(n)})),this.$body.append(this.$body.children().last()[0].outerHTML);const s=this.$body.children().last();$.each(s.children(),((t,o)=>{$(o).html(e[t])}))}const a=this.getHiddenColumns();a.forEach((t=>{t.forceExport&&this.showColumn(t.field)})),"function"==typeof o.exportOptions.fileName&&(t.fileName=o.exportOptions.fileName()),this.$el.tableExport($.extend({onAfterSaveToFile:()=>{o.exportFooter&&this.load(i),e&&this.showColumn(e),s&&this.toggleView(),a.forEach((t=>{t.forceExport&&this.hideColumn(t.field)})),this.columns.forEach((t=>{t.forceHide&&this.showColumn(t.field)})),n&&n()}},o.exportOptions,t))};if("all"===o.exportDataType&&o.pagination){const t="server"===o.sidePagination?"post-body.bs.table":"page-change.bs.table",e=this.options.virtualScroll;this.$el.one(t,(()=>{setTimeout((()=>{n((()=>{this.options.virtualScroll=e,this.togglePagination()}))}),0)})),this.options.virtualScroll=!1,this.togglePagination(),this.trigger("export-saved",this.getData())}else if("selected"===o.exportDataType){let t=this.getData(),e=this.getSelections();const s=o.pagination;if(!e.length)return;"server"===o.sidePagination&&(t={total:o.totalRows,[this.options.dataField]:t},e={total:e.length,[this.options.dataField]:e}),this.load(e),s&&this.togglePagination(),n((()=>{s&&this.togglePagination(),this.load(t)})),this.trigger("export-saved",e)}else n(),this.trigger("export-saved",this.getData(!0))}updateSelected(){super.updateSelected(),this.updateExportButton()}updateExportButton(){"selected"===this.options.exportDataType&&this.$export.find("> button").prop("disabled",!this.getSelections().length)}};