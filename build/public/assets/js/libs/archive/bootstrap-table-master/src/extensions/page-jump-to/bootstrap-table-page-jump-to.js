const Utils=$.fn.bootstrapTable.utils;$.extend($.fn.bootstrapTable.defaults,{showJumpTo:!1,showJumpToByPages:0}),$.extend($.fn.bootstrapTable.locales,{formatJumpTo:()=>"GO"}),$.extend($.fn.bootstrapTable.defaults,$.fn.bootstrapTable.locales),$.BootstrapTable=class extends $.BootstrapTable{initPagination(...t){if(super.initPagination(...t),this.options.showJumpTo&&this.totalPages>=this.options.showJumpToByPages){const t=this.$pagination.find("> .pagination");let s=t.find(".page-jump-to");if(!s.length){s=$(Utils.sprintf(this.constants.html.inputGroup,`<input type="number"\n            class="${this.constants.classes.input}${Utils.sprintf(" %s%s",this.constants.classes.inputPrefix,this.options.iconSize)}"\n            value="${this.options.pageNumber}"\n            min="1"\n            max="${this.totalPages}">`,`<button class="${this.constants.buttonsClass}"  type="button">\n          ${this.options.formatJumpTo()}\n          </button>`)).addClass("page-jump-to").appendTo(t);const a=s.find("input");s.find("button").click((()=>{this.selectPage(+a.val())})),a.keyup((t=>{""!==a.val()&&(13!==t.keyCode?+a.val()<+a.attr("min")?a.val(a.attr("min")):+a.val()>+a.attr("max")&&a.val(a.attr("max")):this.selectPage(+a.val()))})),a.blur((()=>{""===a.val()&&a.val(this.options.pageNumber)}))}}}};