const rowAttr=(o,t)=>({id:`customId_${t}`});$.extend($.fn.bootstrapTable.defaults,{reorderableRows:!1,onDragStyle:null,onDropStyle:null,onDragClass:"reorder_rows_onDragClass",dragHandle:">tbody>tr>td",useRowAttrFunc:!1,onReorderRowsDrag:o=>!1,onReorderRowsDrop:o=>!1,onReorderRow:o=>!1}),$.extend($.fn.bootstrapTable.Constructor.EVENTS,{"reorder-row.bs.table":"onReorderRow"}),$.BootstrapTable=class extends $.BootstrapTable{init(...o){if(!this.options.reorderableRows)return void super.init(...o);this.options.useRowAttrFunc&&(this.options.rowAttributes=rowAttr);const t=this.options.onPostBody;this.options.onPostBody=()=>{setTimeout((()=>{this.makeRowsReorderable(),t.call(this.options,this.options.data)}),1)},super.init(...o)}makeRowsReorderable(){this.$el.tableDnD({onDragStyle:this.options.onDragStyle,onDropStyle:this.options.onDropStyle,onDragClass:this.options.onDragClass,onDragStart:(o,t)=>this.onDropStart(o,t),onDrop:(o,t)=>this.onDrop(o,t),dragHandle:this.options.dragHandle})}onDropStart(o,t){this.$draggingTd=$(t).css("cursor","move"),this.draggingIndex=$(this.$draggingTd.parent()).data("index"),this.options.onReorderRowsDrag(this.data[this.draggingIndex])}onDrop(o){this.$draggingTd.css("cursor","");const t=[];for(let s=0;s<o.tBodies[0].rows.length;s++){const r=$(o.tBodies[0].rows[s]);t.push(this.data[r.data("index")]),r.data("index",s)}const s=this.data[this.draggingIndex],r=t.indexOf(this.data[this.draggingIndex]),n=this.data[r],e=this.options.data.indexOf(this.data[r]);this.options.data.splice(this.options.data.indexOf(s),1),this.options.data.splice(e,0,s),this.options.onReorderRowsDrop(n),this.trigger("reorder-row",t,s,n)}};